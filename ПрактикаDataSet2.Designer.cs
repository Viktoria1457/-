//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace практика {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ПрактикаDataSet2")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ПрактикаDataSet2 : global::System.Data.DataSet {
        
        private Исполнения_заказовDataTable tableИсполнения_заказов;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public ПрактикаDataSet2() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected ПрактикаDataSet2(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["Исполнения_заказов"] != null)) {
                    base.Tables.Add(new Исполнения_заказовDataTable(ds.Tables["Исполнения_заказов"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public Исполнения_заказовDataTable Исполнения_заказов {
            get {
                return this.tableИсполнения_заказов;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            ПрактикаDataSet2 cln = ((ПрактикаDataSet2)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Исполнения_заказов"] != null)) {
                    base.Tables.Add(new Исполнения_заказовDataTable(ds.Tables["Исполнения_заказов"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableИсполнения_заказов = ((Исполнения_заказовDataTable)(base.Tables["Исполнения_заказов"]));
            if ((initTable == true)) {
                if ((this.tableИсполнения_заказов != null)) {
                    this.tableИсполнения_заказов.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitClass() {
            this.DataSetName = "ПрактикаDataSet2";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ПрактикаDataSet2.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableИсполнения_заказов = new Исполнения_заказовDataTable();
            base.Tables.Add(this.tableИсполнения_заказов);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private bool ShouldSerializeИсполнения_заказов() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ПрактикаDataSet2 ds = new ПрактикаDataSet2();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public delegate void Исполнения_заказовRowChangeEventHandler(object sender, Исполнения_заказовRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class Исполнения_заказовDataTable : global::System.Data.TypedTableBase<Исполнения_заказовRow> {
            
            private global::System.Data.DataColumn columnНомер_акта;
            
            private global::System.Data.DataColumn columnКод_Представителя_ОРКО_диагностика;
            
            private global::System.Data.DataColumn columnДата_диагностики;
            
            private global::System.Data.DataColumn columnХарактер_неисправности_после;
            
            private global::System.Data.DataColumn columnПримечание_по_диагностике;
            
            private global::System.Data.DataColumn columnКод_Представителя_ОРКО_ремонт;
            
            private global::System.Data.DataColumn columnДата_ремонта;
            
            private global::System.Data.DataColumn columnСодержание_ремонта;
            
            private global::System.Data.DataColumn columnПримечание_по_ремонту;
            
            private global::System.Data.DataColumn columnКод_оборудования_для_замены;
            
            private global::System.Data.DataColumn columnЗав_N_оборудования_для_замены;
            
            private global::System.Data.DataColumn columnКод_статуса_заказа;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Исполнения_заказовDataTable() {
                this.TableName = "Исполнения_заказов";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal Исполнения_заказовDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected Исполнения_заказовDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Номер_актаColumn {
                get {
                    return this.columnНомер_акта;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Код_Представителя_ОРКО_диагностикаColumn {
                get {
                    return this.columnКод_Представителя_ОРКО_диагностика;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Дата_диагностикиColumn {
                get {
                    return this.columnДата_диагностики;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Характер_неисправности_послеColumn {
                get {
                    return this.columnХарактер_неисправности_после;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Примечание_по_диагностикеColumn {
                get {
                    return this.columnПримечание_по_диагностике;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Код_Представителя_ОРКО_ремонтColumn {
                get {
                    return this.columnКод_Представителя_ОРКО_ремонт;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Дата_ремонтаColumn {
                get {
                    return this.columnДата_ремонта;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Содержание_ремонтаColumn {
                get {
                    return this.columnСодержание_ремонта;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Примечание_по_ремонтуColumn {
                get {
                    return this.columnПримечание_по_ремонту;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Код_оборудования_для_заменыColumn {
                get {
                    return this.columnКод_оборудования_для_замены;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Зав_N_оборудования_для_заменыColumn {
                get {
                    return this.columnЗав_N_оборудования_для_замены;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataColumn Код_статуса_заказаColumn {
                get {
                    return this.columnКод_статуса_заказа;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Исполнения_заказовRow this[int index] {
                get {
                    return ((Исполнения_заказовRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Исполнения_заказовRowChangeEventHandler Исполнения_заказовRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Исполнения_заказовRowChangeEventHandler Исполнения_заказовRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Исполнения_заказовRowChangeEventHandler Исполнения_заказовRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public event Исполнения_заказовRowChangeEventHandler Исполнения_заказовRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void AddИсполнения_заказовRow(Исполнения_заказовRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Исполнения_заказовRow AddИсполнения_заказовRow(int Код_Представителя_ОРКО_диагностика, System.DateTime Дата_диагностики, string Характер_неисправности_после, string Примечание_по_диагностике, int Код_Представителя_ОРКО_ремонт, System.DateTime Дата_ремонта, string Содержание_ремонта, string Примечание_по_ремонту, int Код_оборудования_для_замены, string Зав_N_оборудования_для_замены, int Код_статуса_заказа) {
                Исполнения_заказовRow rowИсполнения_заказовRow = ((Исполнения_заказовRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        Код_Представителя_ОРКО_диагностика,
                        Дата_диагностики,
                        Характер_неисправности_после,
                        Примечание_по_диагностике,
                        Код_Представителя_ОРКО_ремонт,
                        Дата_ремонта,
                        Содержание_ремонта,
                        Примечание_по_ремонту,
                        Код_оборудования_для_замены,
                        Зав_N_оборудования_для_замены,
                        Код_статуса_заказа};
                rowИсполнения_заказовRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowИсполнения_заказовRow);
                return rowИсполнения_заказовRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Исполнения_заказовRow FindByНомер_акта(int Номер_акта) {
                return ((Исполнения_заказовRow)(this.Rows.Find(new object[] {
                            Номер_акта})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                Исполнения_заказовDataTable cln = ((Исполнения_заказовDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new Исполнения_заказовDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal void InitVars() {
                this.columnНомер_акта = base.Columns["Номер_акта"];
                this.columnКод_Представителя_ОРКО_диагностика = base.Columns["Код_Представителя_ОРКО_диагностика"];
                this.columnДата_диагностики = base.Columns["Дата_диагностики"];
                this.columnХарактер_неисправности_после = base.Columns["Характер_неисправности_после"];
                this.columnПримечание_по_диагностике = base.Columns["Примечание_по_диагностике"];
                this.columnКод_Представителя_ОРКО_ремонт = base.Columns["Код_Представителя_ОРКО_ремонт"];
                this.columnДата_ремонта = base.Columns["Дата_ремонта"];
                this.columnСодержание_ремонта = base.Columns["Содержание_ремонта"];
                this.columnПримечание_по_ремонту = base.Columns["Примечание_по_ремонту"];
                this.columnКод_оборудования_для_замены = base.Columns["Код_оборудования_для_замены"];
                this.columnЗав_N_оборудования_для_замены = base.Columns["Зав_N_оборудования_для_замены"];
                this.columnКод_статуса_заказа = base.Columns["Код_статуса_заказа"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private void InitClass() {
                this.columnНомер_акта = new global::System.Data.DataColumn("Номер_акта", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnНомер_акта);
                this.columnКод_Представителя_ОРКО_диагностика = new global::System.Data.DataColumn("Код_Представителя_ОРКО_диагностика", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКод_Представителя_ОРКО_диагностика);
                this.columnДата_диагностики = new global::System.Data.DataColumn("Дата_диагностики", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДата_диагностики);
                this.columnХарактер_неисправности_после = new global::System.Data.DataColumn("Характер_неисправности_после", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnХарактер_неисправности_после);
                this.columnПримечание_по_диагностике = new global::System.Data.DataColumn("Примечание_по_диагностике", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПримечание_по_диагностике);
                this.columnКод_Представителя_ОРКО_ремонт = new global::System.Data.DataColumn("Код_Представителя_ОРКО_ремонт", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКод_Представителя_ОРКО_ремонт);
                this.columnДата_ремонта = new global::System.Data.DataColumn("Дата_ремонта", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnДата_ремонта);
                this.columnСодержание_ремонта = new global::System.Data.DataColumn("Содержание_ремонта", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnСодержание_ремонта);
                this.columnПримечание_по_ремонту = new global::System.Data.DataColumn("Примечание_по_ремонту", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnПримечание_по_ремонту);
                this.columnКод_оборудования_для_замены = new global::System.Data.DataColumn("Код_оборудования_для_замены", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКод_оборудования_для_замены);
                this.columnЗав_N_оборудования_для_замены = new global::System.Data.DataColumn("Зав_N_оборудования_для_замены", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnЗав_N_оборудования_для_замены);
                this.columnКод_статуса_заказа = new global::System.Data.DataColumn("Код_статуса_заказа", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnКод_статуса_заказа);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnНомер_акта}, true));
                this.columnНомер_акта.AutoIncrement = true;
                this.columnНомер_акта.AutoIncrementSeed = -1;
                this.columnНомер_акта.AutoIncrementStep = -1;
                this.columnНомер_акта.AllowDBNull = false;
                this.columnНомер_акта.ReadOnly = true;
                this.columnНомер_акта.Unique = true;
                this.columnДата_диагностики.AllowDBNull = false;
                this.columnХарактер_неисправности_после.AllowDBNull = false;
                this.columnХарактер_неисправности_после.MaxLength = 25;
                this.columnПримечание_по_диагностике.AllowDBNull = false;
                this.columnПримечание_по_диагностике.MaxLength = 25;
                this.columnДата_ремонта.AllowDBNull = false;
                this.columnСодержание_ремонта.AllowDBNull = false;
                this.columnСодержание_ремонта.MaxLength = 25;
                this.columnПримечание_по_ремонту.AllowDBNull = false;
                this.columnПримечание_по_ремонту.MaxLength = 25;
                this.columnЗав_N_оборудования_для_замены.AllowDBNull = false;
                this.columnЗав_N_оборудования_для_замены.MaxLength = 25;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Исполнения_заказовRow NewИсполнения_заказовRow() {
                return ((Исполнения_заказовRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new Исполнения_заказовRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(Исполнения_заказовRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.Исполнения_заказовRowChanged != null)) {
                    this.Исполнения_заказовRowChanged(this, new Исполнения_заказовRowChangeEvent(((Исполнения_заказовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.Исполнения_заказовRowChanging != null)) {
                    this.Исполнения_заказовRowChanging(this, new Исполнения_заказовRowChangeEvent(((Исполнения_заказовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.Исполнения_заказовRowDeleted != null)) {
                    this.Исполнения_заказовRowDeleted(this, new Исполнения_заказовRowChangeEvent(((Исполнения_заказовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.Исполнения_заказовRowDeleting != null)) {
                    this.Исполнения_заказовRowDeleting(this, new Исполнения_заказовRowChangeEvent(((Исполнения_заказовRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void RemoveИсполнения_заказовRow(Исполнения_заказовRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ПрактикаDataSet2 ds = new ПрактикаDataSet2();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "Исполнения_заказовDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class Исполнения_заказовRow : global::System.Data.DataRow {
            
            private Исполнения_заказовDataTable tableИсполнения_заказов;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal Исполнения_заказовRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableИсполнения_заказов = ((Исполнения_заказовDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Номер_акта {
                get {
                    return ((int)(this[this.tableИсполнения_заказов.Номер_актаColumn]));
                }
                set {
                    this[this.tableИсполнения_заказов.Номер_актаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Код_Представителя_ОРКО_диагностика {
                get {
                    try {
                        return ((int)(this[this.tableИсполнения_заказов.Код_Представителя_ОРКО_диагностикаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Код_Представителя_ОРКО_диагностика\' в таблице \'Исполнения_з" +
                                "аказов\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableИсполнения_заказов.Код_Представителя_ОРКО_диагностикаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime Дата_диагностики {
                get {
                    return ((global::System.DateTime)(this[this.tableИсполнения_заказов.Дата_диагностикиColumn]));
                }
                set {
                    this[this.tableИсполнения_заказов.Дата_диагностикиColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Характер_неисправности_после {
                get {
                    return ((string)(this[this.tableИсполнения_заказов.Характер_неисправности_послеColumn]));
                }
                set {
                    this[this.tableИсполнения_заказов.Характер_неисправности_послеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Примечание_по_диагностике {
                get {
                    return ((string)(this[this.tableИсполнения_заказов.Примечание_по_диагностикеColumn]));
                }
                set {
                    this[this.tableИсполнения_заказов.Примечание_по_диагностикеColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Код_Представителя_ОРКО_ремонт {
                get {
                    try {
                        return ((int)(this[this.tableИсполнения_заказов.Код_Представителя_ОРКО_ремонтColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Код_Представителя_ОРКО_ремонт\' в таблице \'Исполнения_заказо" +
                                "в\' равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableИсполнения_заказов.Код_Представителя_ОРКО_ремонтColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public System.DateTime Дата_ремонта {
                get {
                    return ((global::System.DateTime)(this[this.tableИсполнения_заказов.Дата_ремонтаColumn]));
                }
                set {
                    this[this.tableИсполнения_заказов.Дата_ремонтаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Содержание_ремонта {
                get {
                    return ((string)(this[this.tableИсполнения_заказов.Содержание_ремонтаColumn]));
                }
                set {
                    this[this.tableИсполнения_заказов.Содержание_ремонтаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Примечание_по_ремонту {
                get {
                    return ((string)(this[this.tableИсполнения_заказов.Примечание_по_ремонтуColumn]));
                }
                set {
                    this[this.tableИсполнения_заказов.Примечание_по_ремонтуColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Код_оборудования_для_замены {
                get {
                    try {
                        return ((int)(this[this.tableИсполнения_заказов.Код_оборудования_для_заменыColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Код_оборудования_для_замены\' в таблице \'Исполнения_заказов\'" +
                                " равно DBNull.", e);
                    }
                }
                set {
                    this[this.tableИсполнения_заказов.Код_оборудования_для_заменыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public string Зав_N_оборудования_для_замены {
                get {
                    return ((string)(this[this.tableИсполнения_заказов.Зав_N_оборудования_для_заменыColumn]));
                }
                set {
                    this[this.tableИсполнения_заказов.Зав_N_оборудования_для_заменыColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Код_статуса_заказа {
                get {
                    try {
                        return ((int)(this[this.tableИсполнения_заказов.Код_статуса_заказаColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("Значение для столбца \'Код_статуса_заказа\' в таблице \'Исполнения_заказов\' равно DB" +
                                "Null.", e);
                    }
                }
                set {
                    this[this.tableИсполнения_заказов.Код_статуса_заказаColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsКод_Представителя_ОРКО_диагностикаNull() {
                return this.IsNull(this.tableИсполнения_заказов.Код_Представителя_ОРКО_диагностикаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetКод_Представителя_ОРКО_диагностикаNull() {
                this[this.tableИсполнения_заказов.Код_Представителя_ОРКО_диагностикаColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsКод_Представителя_ОРКО_ремонтNull() {
                return this.IsNull(this.tableИсполнения_заказов.Код_Представителя_ОРКО_ремонтColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetКод_Представителя_ОРКО_ремонтNull() {
                this[this.tableИсполнения_заказов.Код_Представителя_ОРКО_ремонтColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsКод_оборудования_для_заменыNull() {
                return this.IsNull(this.tableИсполнения_заказов.Код_оборудования_для_заменыColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetКод_оборудования_для_заменыNull() {
                this[this.tableИсполнения_заказов.Код_оборудования_для_заменыColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public bool IsКод_статуса_заказаNull() {
                return this.IsNull(this.tableИсполнения_заказов.Код_статуса_заказаColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public void SetКод_статуса_заказаNull() {
                this[this.tableИсполнения_заказов.Код_статуса_заказаColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public class Исполнения_заказовRowChangeEvent : global::System.EventArgs {
            
            private Исполнения_заказовRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Исполнения_заказовRowChangeEvent(Исполнения_заказовRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public Исполнения_заказовRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace практика.ПрактикаDataSet2TableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class Исполнения_заказовTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public Исполнения_заказовTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "Исполнения_заказов";
            tableMapping.ColumnMappings.Add("Номер_акта", "Номер_акта");
            tableMapping.ColumnMappings.Add("Код_Представителя_ОРКО_диагностика", "Код_Представителя_ОРКО_диагностика");
            tableMapping.ColumnMappings.Add("Дата_диагностики", "Дата_диагностики");
            tableMapping.ColumnMappings.Add("Характер_неисправности_после", "Характер_неисправности_после");
            tableMapping.ColumnMappings.Add("Примечание_по_диагностике", "Примечание_по_диагностике");
            tableMapping.ColumnMappings.Add("Код_Представителя_ОРКО_ремонт", "Код_Представителя_ОРКО_ремонт");
            tableMapping.ColumnMappings.Add("Дата_ремонта", "Дата_ремонта");
            tableMapping.ColumnMappings.Add("Содержание_ремонта", "Содержание_ремонта");
            tableMapping.ColumnMappings.Add("Примечание_по_ремонту", "Примечание_по_ремонту");
            tableMapping.ColumnMappings.Add("Код_оборудования_для_замены", "Код_оборудования_для_замены");
            tableMapping.ColumnMappings.Add("Зав_N_оборудования_для_замены", "Зав_N_оборудования_для_замены");
            tableMapping.ColumnMappings.Add("Код_статуса_заказа", "Код_статуса_заказа");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[Исполнения_заказов] WHERE (([Номер_акта] = @Original_Номер_акта) AND ((@IsNull_Код_Представителя_ОРКО_диагностика = 1 AND [Код_Представителя_ОРКО_диагностика] IS NULL) OR ([Код_Представителя_ОРКО_диагностика] = @Original_Код_Представителя_ОРКО_диагностика)) AND ([Дата_диагностики] = @Original_Дата_диагностики) AND ([Характер_неисправности_после] = @Original_Характер_неисправности_после) AND ([Примечание_по_диагностике] = @Original_Примечание_по_диагностике) AND ((@IsNull_Код_Представителя_ОРКО_ремонт = 1 AND [Код_Представителя_ОРКО_ремонт] IS NULL) OR ([Код_Представителя_ОРКО_ремонт] = @Original_Код_Представителя_ОРКО_ремонт)) AND ([Дата_ремонта] = @Original_Дата_ремонта) AND ([Содержание_ремонта] = @Original_Содержание_ремонта) AND ([Примечание_по_ремонту] = @Original_Примечание_по_ремонту) AND ((@IsNull_Код_оборудования_для_замены = 1 AND [Код_оборудования_для_замены] IS NULL) OR ([Код_оборудования_для_замены] = @Original_Код_оборудования_для_замены)) AND ([Зав_N_оборудования_для_замены] = @Original_Зав_N_оборудования_для_замены) AND ((@IsNull_Код_статуса_заказа = 1 AND [Код_статуса_заказа] IS NULL) OR ([Код_статуса_заказа] = @Original_Код_статуса_заказа)))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_акта", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_акта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Код_Представителя_ОРКО_диагностика", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_Представителя_ОРКО_диагностика", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_Представителя_ОРКО_диагностика", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_Представителя_ОРКО_диагностика", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Дата_диагностики", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата_диагностики", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Характер_неисправности_после", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Характер_неисправности_после", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Примечание_по_диагностике", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Примечание_по_диагностике", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Код_Представителя_ОРКО_ремонт", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_Представителя_ОРКО_ремонт", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_Представителя_ОРКО_ремонт", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_Представителя_ОРКО_ремонт", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Дата_ремонта", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата_ремонта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Содержание_ремонта", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Содержание_ремонта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Примечание_по_ремонту", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Примечание_по_ремонту", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Код_оборудования_для_замены", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_оборудования_для_замены", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_оборудования_для_замены", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_оборудования_для_замены", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Зав_N_оборудования_для_замены", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Зав_N_оборудования_для_замены", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Код_статуса_заказа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_статуса_заказа", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_статуса_заказа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_статуса_заказа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = @"INSERT INTO [dbo].[Исполнения_заказов] ([Код_Представителя_ОРКО_диагностика], [Дата_диагностики], [Характер_неисправности_после], [Примечание_по_диагностике], [Код_Представителя_ОРКО_ремонт], [Дата_ремонта], [Содержание_ремонта], [Примечание_по_ремонту], [Код_оборудования_для_замены], [Зав_N_оборудования_для_замены], [Код_статуса_заказа]) VALUES (@Код_Представителя_ОРКО_диагностика, @Дата_диагностики, @Характер_неисправности_после, @Примечание_по_диагностике, @Код_Представителя_ОРКО_ремонт, @Дата_ремонта, @Содержание_ремонта, @Примечание_по_ремонту, @Код_оборудования_для_замены, @Зав_N_оборудования_для_замены, @Код_статуса_заказа);
SELECT Номер_акта, Код_Представителя_ОРКО_диагностика, Дата_диагностики, Характер_неисправности_после, Примечание_по_диагностике, Код_Представителя_ОРКО_ремонт, Дата_ремонта, Содержание_ремонта, Примечание_по_ремонту, Код_оборудования_для_замены, Зав_N_оборудования_для_замены, Код_статуса_заказа FROM Исполнения_заказов WHERE (Номер_акта = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_Представителя_ОРКО_диагностика", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_Представителя_ОРКО_диагностика", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата_диагностики", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата_диагностики", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Характер_неисправности_после", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Характер_неисправности_после", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Примечание_по_диагностике", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Примечание_по_диагностике", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_Представителя_ОРКО_ремонт", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_Представителя_ОРКО_ремонт", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата_ремонта", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата_ремонта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Содержание_ремонта", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Содержание_ремонта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Примечание_по_ремонту", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Примечание_по_ремонту", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_оборудования_для_замены", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_оборудования_для_замены", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Зав_N_оборудования_для_замены", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Зав_N_оборудования_для_замены", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_статуса_заказа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_статуса_заказа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Исполнения_заказов] SET [Код_Представителя_ОРКО_диагностика] = @Код" +
                "_Представителя_ОРКО_диагностика, [Дата_диагностики] = @Дата_диагностики, [Характ" +
                "ер_неисправности_после] = @Характер_неисправности_после, [Примечание_по_диагност" +
                "ике] = @Примечание_по_диагностике, [Код_Представителя_ОРКО_ремонт] = @Код_Предст" +
                "авителя_ОРКО_ремонт, [Дата_ремонта] = @Дата_ремонта, [Содержание_ремонта] = @Сод" +
                "ержание_ремонта, [Примечание_по_ремонту] = @Примечание_по_ремонту, [Код_оборудов" +
                "ания_для_замены] = @Код_оборудования_для_замены, [Зав_N_оборудования_для_замены]" +
                " = @Зав_N_оборудования_для_замены, [Код_статуса_заказа] = @Код_статуса_заказа WH" +
                "ERE (([Номер_акта] = @Original_Номер_акта) AND ((@IsNull_Код_Представителя_ОРКО_" +
                "диагностика = 1 AND [Код_Представителя_ОРКО_диагностика] IS NULL) OR ([Код_Предс" +
                "тавителя_ОРКО_диагностика] = @Original_Код_Представителя_ОРКО_диагностика)) AND " +
                "([Дата_диагностики] = @Original_Дата_диагностики) AND ([Характер_неисправности_п" +
                "осле] = @Original_Характер_неисправности_после) AND ([Примечание_по_диагностике]" +
                " = @Original_Примечание_по_диагностике) AND ((@IsNull_Код_Представителя_ОРКО_рем" +
                "онт = 1 AND [Код_Представителя_ОРКО_ремонт] IS NULL) OR ([Код_Представителя_ОРКО" +
                "_ремонт] = @Original_Код_Представителя_ОРКО_ремонт)) AND ([Дата_ремонта] = @Orig" +
                "inal_Дата_ремонта) AND ([Содержание_ремонта] = @Original_Содержание_ремонта) AND" +
                " ([Примечание_по_ремонту] = @Original_Примечание_по_ремонту) AND ((@IsNull_Код_о" +
                "борудования_для_замены = 1 AND [Код_оборудования_для_замены] IS NULL) OR ([Код_о" +
                "борудования_для_замены] = @Original_Код_оборудования_для_замены)) AND ([Зав_N_об" +
                "орудования_для_замены] = @Original_Зав_N_оборудования_для_замены) AND ((@IsNull_" +
                "Код_статуса_заказа = 1 AND [Код_статуса_заказа] IS NULL) OR ([Код_статуса_заказа" +
                "] = @Original_Код_статуса_заказа)));\r\nSELECT Номер_акта, Код_Представителя_ОРКО_" +
                "диагностика, Дата_диагностики, Характер_неисправности_после, Примечание_по_диагн" +
                "остике, Код_Представителя_ОРКО_ремонт, Дата_ремонта, Содержание_ремонта, Примеча" +
                "ние_по_ремонту, Код_оборудования_для_замены, Зав_N_оборудования_для_замены, Код_" +
                "статуса_заказа FROM Исполнения_заказов WHERE (Номер_акта = @Номер_акта)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_Представителя_ОРКО_диагностика", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_Представителя_ОРКО_диагностика", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата_диагностики", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата_диагностики", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Характер_неисправности_после", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Характер_неисправности_после", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Примечание_по_диагностике", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Примечание_по_диагностике", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_Представителя_ОРКО_ремонт", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_Представителя_ОРКО_ремонт", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Дата_ремонта", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата_ремонта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Содержание_ремонта", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Содержание_ремонта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Примечание_по_ремонту", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Примечание_по_ремонту", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_оборудования_для_замены", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_оборудования_для_замены", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Зав_N_оборудования_для_замены", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Зав_N_оборудования_для_замены", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Код_статуса_заказа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_статуса_заказа", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Номер_акта", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_акта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Код_Представителя_ОРКО_диагностика", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_Представителя_ОРКО_диагностика", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_Представителя_ОРКО_диагностика", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_Представителя_ОРКО_диагностика", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Дата_диагностики", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата_диагностики", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Характер_неисправности_после", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Характер_неисправности_после", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Примечание_по_диагностике", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Примечание_по_диагностике", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Код_Представителя_ОРКО_ремонт", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_Представителя_ОРКО_ремонт", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_Представителя_ОРКО_ремонт", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_Представителя_ОРКО_ремонт", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Дата_ремонта", global::System.Data.SqlDbType.Date, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Дата_ремонта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Содержание_ремонта", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Содержание_ремонта", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Примечание_по_ремонту", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Примечание_по_ремонту", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Код_оборудования_для_замены", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_оборудования_для_замены", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_оборудования_для_замены", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_оборудования_для_замены", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Зав_N_оборудования_для_замены", global::System.Data.SqlDbType.VarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Зав_N_оборудования_для_замены", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_Код_статуса_заказа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_статуса_заказа", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Код_статуса_заказа", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Код_статуса_заказа", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Номер_акта", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Номер_акта", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::практика.Properties.Settings.Default.ПрактикаConnectionString;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT Номер_акта, Код_Представителя_ОРКО_диагностика, Дата_диагностики, Характер_неисправности_после, Примечание_по_диагностике, Код_Представителя_ОРКО_ремонт, Дата_ремонта, Содержание_ремонта, Примечание_по_ремонту, Код_оборудования_для_замены, Зав_N_оборудования_для_замены, Код_статуса_заказа FROM dbo.Исполнения_заказов";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(ПрактикаDataSet2.Исполнения_заказовDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual ПрактикаDataSet2.Исполнения_заказовDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            ПрактикаDataSet2.Исполнения_заказовDataTable dataTable = new ПрактикаDataSet2.Исполнения_заказовDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ПрактикаDataSet2.Исполнения_заказовDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(ПрактикаDataSet2 dataSet) {
            return this.Adapter.Update(dataSet, "Исполнения_заказов");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_Номер_акта, global::System.Nullable<int> Original_Код_Представителя_ОРКО_диагностика, System.DateTime Original_Дата_диагностики, string Original_Характер_неисправности_после, string Original_Примечание_по_диагностике, global::System.Nullable<int> Original_Код_Представителя_ОРКО_ремонт, System.DateTime Original_Дата_ремонта, string Original_Содержание_ремонта, string Original_Примечание_по_ремонту, global::System.Nullable<int> Original_Код_оборудования_для_замены, string Original_Зав_N_оборудования_для_замены, global::System.Nullable<int> Original_Код_статуса_заказа) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Номер_акта));
            if ((Original_Код_Представителя_ОРКО_диагностика.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[2].Value = ((int)(Original_Код_Представителя_ОРКО_диагностика.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[1].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[2].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[3].Value = ((System.DateTime)(Original_Дата_диагностики));
            if ((Original_Характер_неисправности_после == null)) {
                throw new global::System.ArgumentNullException("Original_Характер_неисправности_после");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[4].Value = ((string)(Original_Характер_неисправности_после));
            }
            if ((Original_Примечание_по_диагностике == null)) {
                throw new global::System.ArgumentNullException("Original_Примечание_по_диагностике");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((string)(Original_Примечание_по_диагностике));
            }
            if ((Original_Код_Представителя_ОРКО_ремонт.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[7].Value = ((int)(Original_Код_Представителя_ОРКО_ремонт.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[6].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[8].Value = ((System.DateTime)(Original_Дата_ремонта));
            if ((Original_Содержание_ремонта == null)) {
                throw new global::System.ArgumentNullException("Original_Содержание_ремонта");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[9].Value = ((string)(Original_Содержание_ремонта));
            }
            if ((Original_Примечание_по_ремонту == null)) {
                throw new global::System.ArgumentNullException("Original_Примечание_по_ремонту");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[10].Value = ((string)(Original_Примечание_по_ремонту));
            }
            if ((Original_Код_оборудования_для_замены.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[12].Value = ((int)(Original_Код_оборудования_для_замены.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[11].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[12].Value = global::System.DBNull.Value;
            }
            if ((Original_Зав_N_оборудования_для_замены == null)) {
                throw new global::System.ArgumentNullException("Original_Зав_N_оборудования_для_замены");
            }
            else {
                this.Adapter.DeleteCommand.Parameters[13].Value = ((string)(Original_Зав_N_оборудования_для_замены));
            }
            if ((Original_Код_статуса_заказа.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[15].Value = ((int)(Original_Код_статуса_заказа.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[14].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[15].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(global::System.Nullable<int> Код_Представителя_ОРКО_диагностика, System.DateTime Дата_диагностики, string Характер_неисправности_после, string Примечание_по_диагностике, global::System.Nullable<int> Код_Представителя_ОРКО_ремонт, System.DateTime Дата_ремонта, string Содержание_ремонта, string Примечание_по_ремонту, global::System.Nullable<int> Код_оборудования_для_замены, string Зав_N_оборудования_для_замены, global::System.Nullable<int> Код_статуса_заказа) {
            if ((Код_Представителя_ОРКО_диагностика.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Код_Представителя_ОРКО_диагностика.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[1].Value = ((System.DateTime)(Дата_диагностики));
            if ((Характер_неисправности_после == null)) {
                throw new global::System.ArgumentNullException("Характер_неисправности_после");
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Характер_неисправности_после));
            }
            if ((Примечание_по_диагностике == null)) {
                throw new global::System.ArgumentNullException("Примечание_по_диагностике");
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(Примечание_по_диагностике));
            }
            if ((Код_Представителя_ОРКО_ремонт.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[4].Value = ((int)(Код_Представителя_ОРКО_ремонт.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.InsertCommand.Parameters[5].Value = ((System.DateTime)(Дата_ремонта));
            if ((Содержание_ремонта == null)) {
                throw new global::System.ArgumentNullException("Содержание_ремонта");
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Содержание_ремонта));
            }
            if ((Примечание_по_ремонту == null)) {
                throw new global::System.ArgumentNullException("Примечание_по_ремонту");
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = ((string)(Примечание_по_ремонту));
            }
            if ((Код_оборудования_для_замены.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(Код_оборудования_для_замены.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Зав_N_оборудования_для_замены == null)) {
                throw new global::System.ArgumentNullException("Зав_N_оборудования_для_замены");
            }
            else {
                this.Adapter.InsertCommand.Parameters[9].Value = ((string)(Зав_N_оборудования_для_замены));
            }
            if ((Код_статуса_заказа.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[10].Value = ((int)(Код_статуса_заказа.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> Код_Представителя_ОРКО_диагностика, 
                    System.DateTime Дата_диагностики, 
                    string Характер_неисправности_после, 
                    string Примечание_по_диагностике, 
                    global::System.Nullable<int> Код_Представителя_ОРКО_ремонт, 
                    System.DateTime Дата_ремонта, 
                    string Содержание_ремонта, 
                    string Примечание_по_ремонту, 
                    global::System.Nullable<int> Код_оборудования_для_замены, 
                    string Зав_N_оборудования_для_замены, 
                    global::System.Nullable<int> Код_статуса_заказа, 
                    int Original_Номер_акта, 
                    global::System.Nullable<int> Original_Код_Представителя_ОРКО_диагностика, 
                    System.DateTime Original_Дата_диагностики, 
                    string Original_Характер_неисправности_после, 
                    string Original_Примечание_по_диагностике, 
                    global::System.Nullable<int> Original_Код_Представителя_ОРКО_ремонт, 
                    System.DateTime Original_Дата_ремонта, 
                    string Original_Содержание_ремонта, 
                    string Original_Примечание_по_ремонту, 
                    global::System.Nullable<int> Original_Код_оборудования_для_замены, 
                    string Original_Зав_N_оборудования_для_замены, 
                    global::System.Nullable<int> Original_Код_статуса_заказа, 
                    int Номер_акта) {
            if ((Код_Представителя_ОРКО_диагностика.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Код_Представителя_ОРКО_диагностика.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[1].Value = ((System.DateTime)(Дата_диагностики));
            if ((Характер_неисправности_после == null)) {
                throw new global::System.ArgumentNullException("Характер_неисправности_после");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Характер_неисправности_после));
            }
            if ((Примечание_по_диагностике == null)) {
                throw new global::System.ArgumentNullException("Примечание_по_диагностике");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(Примечание_по_диагностике));
            }
            if ((Код_Представителя_ОРКО_ремонт.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((int)(Код_Представителя_ОРКО_ремонт.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[5].Value = ((System.DateTime)(Дата_ремонта));
            if ((Содержание_ремонта == null)) {
                throw new global::System.ArgumentNullException("Содержание_ремонта");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Содержание_ремонта));
            }
            if ((Примечание_по_ремонту == null)) {
                throw new global::System.ArgumentNullException("Примечание_по_ремонту");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((string)(Примечание_по_ремонту));
            }
            if ((Код_оборудования_для_замены.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Код_оборудования_для_замены.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            if ((Зав_N_оборудования_для_замены == null)) {
                throw new global::System.ArgumentNullException("Зав_N_оборудования_для_замены");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[9].Value = ((string)(Зав_N_оборудования_для_замены));
            }
            if ((Код_статуса_заказа.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[10].Value = ((int)(Код_статуса_заказа.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[10].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[11].Value = ((int)(Original_Номер_акта));
            if ((Original_Код_Представителя_ОРКО_диагностика.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[13].Value = ((int)(Original_Код_Представителя_ОРКО_диагностика.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[12].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[13].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[14].Value = ((System.DateTime)(Original_Дата_диагностики));
            if ((Original_Характер_неисправности_после == null)) {
                throw new global::System.ArgumentNullException("Original_Характер_неисправности_после");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[15].Value = ((string)(Original_Характер_неисправности_после));
            }
            if ((Original_Примечание_по_диагностике == null)) {
                throw new global::System.ArgumentNullException("Original_Примечание_по_диагностике");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[16].Value = ((string)(Original_Примечание_по_диагностике));
            }
            if ((Original_Код_Представителя_ОРКО_ремонт.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[18].Value = ((int)(Original_Код_Представителя_ОРКО_ремонт.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[17].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[18].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[19].Value = ((System.DateTime)(Original_Дата_ремонта));
            if ((Original_Содержание_ремонта == null)) {
                throw new global::System.ArgumentNullException("Original_Содержание_ремонта");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[20].Value = ((string)(Original_Содержание_ремонта));
            }
            if ((Original_Примечание_по_ремонту == null)) {
                throw new global::System.ArgumentNullException("Original_Примечание_по_ремонту");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[21].Value = ((string)(Original_Примечание_по_ремонту));
            }
            if ((Original_Код_оборудования_для_замены.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[23].Value = ((int)(Original_Код_оборудования_для_замены.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[22].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[23].Value = global::System.DBNull.Value;
            }
            if ((Original_Зав_N_оборудования_для_замены == null)) {
                throw new global::System.ArgumentNullException("Original_Зав_N_оборудования_для_замены");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[24].Value = ((string)(Original_Зав_N_оборудования_для_замены));
            }
            if ((Original_Код_статуса_заказа.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((int)(Original_Код_статуса_заказа.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[27].Value = ((int)(Номер_акта));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    global::System.Nullable<int> Код_Представителя_ОРКО_диагностика, 
                    System.DateTime Дата_диагностики, 
                    string Характер_неисправности_после, 
                    string Примечание_по_диагностике, 
                    global::System.Nullable<int> Код_Представителя_ОРКО_ремонт, 
                    System.DateTime Дата_ремонта, 
                    string Содержание_ремонта, 
                    string Примечание_по_ремонту, 
                    global::System.Nullable<int> Код_оборудования_для_замены, 
                    string Зав_N_оборудования_для_замены, 
                    global::System.Nullable<int> Код_статуса_заказа, 
                    int Original_Номер_акта, 
                    global::System.Nullable<int> Original_Код_Представителя_ОРКО_диагностика, 
                    System.DateTime Original_Дата_диагностики, 
                    string Original_Характер_неисправности_после, 
                    string Original_Примечание_по_диагностике, 
                    global::System.Nullable<int> Original_Код_Представителя_ОРКО_ремонт, 
                    System.DateTime Original_Дата_ремонта, 
                    string Original_Содержание_ремонта, 
                    string Original_Примечание_по_ремонту, 
                    global::System.Nullable<int> Original_Код_оборудования_для_замены, 
                    string Original_Зав_N_оборудования_для_замены, 
                    global::System.Nullable<int> Original_Код_статуса_заказа) {
            return this.Update(Код_Представителя_ОРКО_диагностика, Дата_диагностики, Характер_неисправности_после, Примечание_по_диагностике, Код_Представителя_ОРКО_ремонт, Дата_ремонта, Содержание_ремонта, Примечание_по_ремонту, Код_оборудования_для_замены, Зав_N_оборудования_для_замены, Код_статуса_заказа, Original_Номер_акта, Original_Код_Представителя_ОРКО_диагностика, Original_Дата_диагностики, Original_Характер_неисправности_после, Original_Примечание_по_диагностике, Original_Код_Представителя_ОРКО_ремонт, Original_Дата_ремонта, Original_Содержание_ремонта, Original_Примечание_по_ремонту, Original_Код_оборудования_для_замены, Original_Зав_N_оборудования_для_замены, Original_Код_статуса_заказа, Original_Номер_акта);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private Исполнения_заказовTableAdapter _исполнения_заказовTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public Исполнения_заказовTableAdapter Исполнения_заказовTableAdapter {
            get {
                return this._исполнения_заказовTableAdapter;
            }
            set {
                this._исполнения_заказовTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._исполнения_заказовTableAdapter != null) 
                            && (this._исполнения_заказовTableAdapter.Connection != null))) {
                    return this._исполнения_заказовTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._исполнения_заказовTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateUpdatedRows(ПрактикаDataSet2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._исполнения_заказовTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.Исполнения_заказов.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._исполнения_заказовTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateInsertedRows(ПрактикаDataSet2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._исполнения_заказовTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.Исполнения_заказов.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._исполнения_заказовTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private int UpdateDeletedRows(ПрактикаDataSet2 dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._исполнения_заказовTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.Исполнения_заказов.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._исполнения_заказовTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public virtual int UpdateAll(ПрактикаDataSet2 dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._исполнения_заказовTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._исполнения_заказовTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("Все адаптеры таблицы, управляемые диспетчером адаптера таблицы TableAdapterManage" +
                        "r, должны использовать одинаковую строку подключения.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager не содержит сведений о подключении. Укажите для каждого адапт" +
                        "ера таблицы TableAdapterManager допустимый экземпляр адаптера таблицы.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("Не удается начать транзакцию. Текущее соединение данных не поддерживает транзакци" +
                        "и или текущее состояние не позволяет начать транзакцию.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._исполнения_заказовTableAdapter != null)) {
                    revertConnections.Add(this._исполнения_заказовTableAdapter, this._исполнения_заказовTableAdapter.Connection);
                    this._исполнения_заказовTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._исполнения_заказовTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._исполнения_заказовTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._исполнения_заказовTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._исполнения_заказовTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._исполнения_заказовTableAdapter != null)) {
                    this._исполнения_заказовTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._исполнения_заказовTableAdapter]));
                    this._исполнения_заказовTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "17.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591